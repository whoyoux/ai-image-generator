generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  expiresIn Int?
}

enum PLANS {
  BASIC
  MEDIUM
  PRO
}

model User {
  id       String    @id
  sessions Session[]

  email         String  @unique
  emailVerified Boolean @default(false) @map("email_verified")

  username       String
  hashedPassword String @map("hashed_password")

  credits  Int      @default(5)
  images   Image[]
  speeches Speech[]

  emailVerificationTokens EmailVerificationToken[]

  orders           Order[]
  stripeCustomerId String  @unique @map("stripe_customer_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Order {
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id])

  plan PLANS

  paid   Boolean   @default(false)
  paidAt DateTime? @map("paid_at")

  canceled   Boolean   @default(false)
  canceledAt DateTime? @map("canceled_at")
  canceledBy String?   @map("canceled_by")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String
}

model EmailVerificationToken {
  id        String   @id
  email     String
  expiresAt DateTime @map("expires_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Image {
  id            String @id @default(cuid())
  label         String @default("Image")
  style         String @default("Style default")
  imageUrl      String
  prompt        String
  revisedPrompt String @map("revised_prompt")

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  isPublic Boolean @default(false) @map("is_public")

  createdAt DateTime @default(now()) @map("created_at")
}

model Speech {
  id        String @id @default(cuid())
  label     String @default("Speech")
  voice     String @default("Voice default")
  text      String
  speechUrl String
  speed     Float

  user   User   @relation(fields: [userId], references: [id])
  userId String

  isPublic Boolean @default(false) @map("is_public")

  createdAt DateTime @default(now()) @map("created_at")
}
